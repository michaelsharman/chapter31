<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2015-05-08T08:07:23+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple JSON prettify]]></title>
    <link href="http://chapter31.com/2013/12/16/simple-json-prettify/"/>
    <updated>2013-12-16T14:24:00+11:00</updated>
    <id>http://chapter31.com/2013/12/16/simple-json-prettify</id>
    <content type="html"><![CDATA[<p>I went looking for a quick and easy way to style JSON content for display in the browser and quickly came across this <a href="http://stackoverflow.com/questions/4810841/json-pretty-print-using-javascript/7220510#7220510">answer at stack overflow</a> with a <a href="http://jsfiddle.net/unLSJ/">corresponding jsfiddle entry</a>.</p>

<p>However the problem is that this is kinda broken, the output isn't valid JSON because the keys aren't quoted. It's just outputting a JavaScript object intead. A quick fix (and slight refactor) to the JavaScript gave me what I needed, I couldn't post on SO as I don't have the reputation (yeah that's annoying) so I'm posting here for reference and I <a href="http://jsfiddle.net/michaelsharman/HLzxw/3/">forked the original JSFiddle</a>.</p>

<p>```javascript
var prettyPrint = (function () {</p>

<pre><code>'use strict';
</code></pre>

<p>   function replacer (match, pIndent, pKey, pVal, pEnd) {</p>

<pre><code>    var key = '&lt;span class=json-key&gt;';
    var val = '&lt;span class=json-value&gt;';
    var str = '&lt;span class=json-string&gt;';
    var r = pIndent || '';
    if (pKey) {
        r = r + key + pKey.replace(/[: ]/g, '') + '&lt;/span&gt;: ';
    }
    if (pVal) {
        r = r + (pVal[0] == '"' ? str : val) + pVal + '&lt;/span&gt;';
    }
    return r + (pEnd || '');
}

function render (obj) {
    var jsonLine = /^( *)("[\w]+": )?("[^"]*"|[\w.+-]*)?([,[{])?$/mg;
    return JSON.stringify(obj, null, 3)
        .replace(/&amp;/g, '&amp;amp;').replace(/\\"/g, '\\&amp;quot;')
        .replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;')
        .replace(jsonLine, replacer);
}

return {
    render: render
};
</code></pre>

<p>}());
```</p>

<p>And the CSS that goes with it:</p>

<p>```css
pre {
   background-color: ghostwhite;
   border: 1px solid silver;
   padding: 10px 20px;
   margin: 20px;
}</p>

<p>.json-key {
   color: brown;
}</p>

<p>.json-value {
   color: navy;
}</p>

<p>.json-string {
   color: olive;
}
```</p>

<h2>The end result</h2>

<p>The original:</p>

<p>```javascript
[
   {</p>

<pre><code>  name: "Earth",
  order: 3,
  stats: {
     life: true,
     mass: 5.973600000000001e+24
  }
</code></pre>

<p>   },
   {</p>

<pre><code>  name: "Saturn",
  order: 6,
  stats: {
     life: null,
     mass: 5.6846e+26
  }
</code></pre>

<p>   }
]
```</p>

<p>The result after a minor change:</p>

<p>```javascript
[
   {</p>

<pre><code>  "name": "Earth",
  "order": 3,
  "stats": {
     "life": true,
     "mass": 5.973600000000001e+24
  }
</code></pre>

<p>   },
   {</p>

<pre><code>  "name": "Saturn",
  "order": 6,
  "stats": {
     "life": null,
     "mass": 5.6846e+26
  }
</code></pre>

<p>   }
]
```</p>
]]></content>
  </entry>
  
</feed>
