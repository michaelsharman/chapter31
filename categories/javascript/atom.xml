<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2013-06-19T12:10:26+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON undefined issues on IE8 and IE9]]></title>
    <link href="http://chapter31.com/2012/11/21/json-undefined-issues-on-ie8-and-ie9/"/>
    <updated>2012-11-21T16:48:57+11:00</updated>
    <id>http://chapter31.com/2012/11/21/json-undefined-issues-on-ie8-and-ie9</id>
    <content type="html"><![CDATA[<p>I had some issues today while testing in IE, where "JSON" was undefined. This was happening in IE8 and IE9, which is strange because the JSON functions are in those IE versions. The problem was IE's compatibility view, which triggers rendering in sort-of-IE7 mode. Classy. This was making JSON undefined ;(</p>

<p>The usual fix for this is to add a meta tag to force IE to use "edge" (or a specific version if you like):</p>

<p><code>html
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
</code></p>

<p>However we've had problems with this in the past where it doesn't always seem to work, especially on corporate networks and intranets. We now use an Apache header (and not use the meta tag at all) to achieve IE=edge. Here's the Apache header (to go in your .htaccess, note that you need mod_headers enabled for this to work):</p>

<p><code>
Header set X-UA-Compatible "IE=edge"
</code></p>

<h3>Update</h3>

<p>You can use the Apache header above, combined with a check to only send the header for Internet Explorer</p>

<p><code>
BrowserMatch MSIE ie
Header set X-UA-Compatible "IE=edge,chrome=1" env=ie
</code></p>

<p>To be safe, if you can't use the Apache header above (which we found to always work as opposed to the meta tag) you might want to load <a href="https://github.com/douglascrockford/JSON-js/blob/master/json2.js">json2.js</a> for IE8 and 9 because you can't control if a user is in compatibility view. If they are, then JSON will be undefined. The cool thing about json2 is that if it detects that JSON is already defined, it won't do anything at all. But it's there if the older browsers need it (IE7) or you somehow have visitors in compatibility view.</p>

<p>You can also load json2.js from a CDN:</p>

<p>```
http://cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.js
or minified
http://cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.min.js</p>

<p>or</p>

<p>http://ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js
or minified
http://ajax.cdnjs.com/ajax/libs/json2/20110223/json2.min.js
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery UI dialog focus on first tabable element]]></title>
    <link href="http://chapter31.com/2012/09/14/jquery-ui-dialog-focus-on-first-tabable-element/"/>
    <updated>2012-09-14T16:27:29+10:00</updated>
    <id>http://chapter31.com/2012/09/14/jquery-ui-dialog-focus-on-first-tabable-element</id>
    <content type="html"><![CDATA[<p>I've been using the <a href="http://jqueryui.com/demos/dialog/">jQuery UI dialog</a> for a project recently, one thing that bugged me though, was that upon opening a dialog the first tabable element always gets focussed. This can be:</p>

<ul>
<li>hyperlinks</li>
<li>input boxes</li>
<li>select boxes</li>
<li>buttons</li>
<li>textareas etc</li>
</ul>


<p>An example of this is:</p>

<p><img src="/images/uploads/2012/09/Screen-shot-2012-09-14-at-4.06.09-PM.png" alt="" /></p>

<p><img src="/images/uploads/2012/09/Screen-shot-2012-09-14-at-4.06.30-PM.png" alt="" /></p>

<p>A quick way around this is to fire a <a href="http://api.jquery.com/blur/">blur()</a> method, targeting the first <em>tabable</em> element type of your dialog. So if I open up a dialog window with an id of <em>dialog</em>, I can do:</p>

<p><code>javascript
  $('#dialog').dialog('open');
  $('#dialog').find('a, select, input, textarea, button').first().blur();
</code></p>

<p>I was hoping to put this inside the open() method of the dialog, but it doesn't seem to parse the contents of the dialog within that method. So the following did not work for me:</p>

<p>``` javascript
$('#dialog').dialog({
  autoOpen: false,
  maxWidth: 600,
  minWidth: 500,
  modal: true,
  resizable: false,
  open: function() {</p>

<pre><code>$(this).find('a, select, input, textarea, button').first().blur();
</code></pre>

<p>  }
});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timing synchronous JavaScript operations]]></title>
    <link href="http://chapter31.com/2012/08/13/timing-synchronous-javascript-operations/"/>
    <updated>2012-08-13T21:24:00+10:00</updated>
    <id>http://chapter31.com/2012/08/13/timing-synchronous-javascript-operations</id>
    <content type="html"><![CDATA[<p>There's a cool little method on the <em>console</em> object that allows you to track how long an operation took to run. It's called <a href="https://developer.mozilla.org/en-US/docs/DOM/console.time">console.time</a>.</p>

<p>Basically you just start a timer at the top of the code you want to time, like so:</p>

<p>``` javascript
console.time('timer-name');</p>

<p>// your javascript goes here</p>

<p>console.timeEnd('timer-name');
```</p>

<p>Each <em>timer</em> block should have a unique name (in the example above I called my timer 'timer-name'), and you can have up to 10,000 timers running on a single page.</p>

<p>By calling <em>console.timeEnd()</em>, the browser will write to the console how long (in milliseconds) the code took to run since you first called console.time();</p>

<p>This works in Chrome 2+, Firefox 10+, Opera and Safari 4+. Typically IE support is a little sketchy, however I <a href="http://stackoverflow.com/questions/3516515/console-time-in-ie8-developer-tools?answertab=active#tab-top">found a cool custom function</a> on Stack Overflow that allows you to use console.time/timeEnd in IE7/8 etc.</p>

<p>``` javascript
//console.time implementation for IE
if(window.console &amp;&amp; typeof(window.console.time) == "undefined") {</p>

<pre><code>console.time = function(name, reset){
    if(!name) { return; }
    var time = new Date().getTime();
    if(!console.timeCounters) { console.timeCounters = {} };
    var key = "KEY" + name.toString();
    if(!reset &amp;&amp; console.timeCounters[key]) { return; }
        console.timeCounters[key] = time;
    };

console.timeEnd = function(name){
    var time = new Date().getTime();
    if(!console.timeCounters) { return; }
    var key = "KEY" + name.toString();
    var timeCounter = console.timeCounters[key];
    if(timeCounter) {
        var diff = time - timeCounter;
        var label = name + ": " + diff + "ms";
        console.info(label);
        delete console.timeCounters[key];
    }
    return diff;
};
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery tinyMCE issue with $.attr();]]></title>
    <link href="http://chapter31.com/2012/07/04/jquery-tinymce-issue-with-attr/"/>
    <updated>2012-07-04T23:05:00+10:00</updated>
    <id>http://chapter31.com/2012/07/04/jquery-tinymce-issue-with-attr</id>
    <content type="html"><![CDATA[<p>I had some strange behaviour with the jQuery verion of tinyMCE (3.4.6). Basically I was <a href="http://harvesthq.github.com/chosen/">integrating the chosen library</a> (which is build as a jQuery plugin), but it seems the $.attr('id') from within chosen.js was returning a JavaScript element reference instead of the value of the "id" field.</p>

<p><a href="/images/uploads/2012/07/tiny_error.png"><img src="/images/uploads/2012/07/tiny_error.png" alt="" /></a></p>

<p>Some basic tracing showed the strange error:</p>

<p><a href="/images/uploads/2012/07/tiny_trace.png"><img src="/images/uploads/2012/07/tiny_trace.png" alt="" /></a></p>

<p>The solution for me was moving to tinyMCE 3.5.4.1 (and jQuery 1.7.2, previously I was on 1.6.4). All good now, just thought I'd throw up a quick post if anyone was being caught by this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Prototype methods to jQuery]]></title>
    <link href="http://chapter31.com/2010/12/07/adding-prototype-methods-to-jquery/"/>
    <updated>2010-12-07T22:41:00+11:00</updated>
    <id>http://chapter31.com/2010/12/07/adding-prototype-methods-to-jquery</id>
    <content type="html"><![CDATA[<p>We recently upgraded a project which was using the Prototype JavaScript framework to use jQuery and ran into a few methods which didn't exist in jQuery at all.</p>

<p>A quick search gave us an easy solution; by adding a prototype property (not related to the Prototype framework) to String.prototype we can give every <code>string</code> in our codebase access to these methods as if they were part of the JavaScript spec (or the jQuery library).</p>

<p>E.g. we wanted to add the endsWith() and startsWith() functions on any String object which basically checks a string for a suffix or prefix:</p>

<p>``` javascript
// Allows jQuery to use '.startsWith' and '.endsWith' which are in the Prototype framework
function utilityInit()
{</p>

<pre><code>String.prototype.endsWith = function (suffix) {
  return (this.substr(this.length - suffix.length) === suffix);
}

String.prototype.startsWith = function(prefix) {
  return (this.substr(0, prefix.length) === prefix);
}
</code></pre>

<p>}
```</p>

<p>Note that I wrapped these additions in a function called utilityInit() which I run on document ready...so I can access them anytime I need.</p>
]]></content>
  </entry>
  
</feed>
