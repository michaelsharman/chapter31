<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ColdFusion | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/coldfusion/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2013-04-30T22:42:24+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding a global ignore file for git]]></title>
    <link href="http://chapter31.com/2013/01/21/adding-a-global-ignore-file-for-git/"/>
    <updated>2013-01-21T23:02:46+11:00</updated>
    <id>http://chapter31.com/2013/01/21/adding-a-global-ignore-file-for-git</id>
    <content type="html"><![CDATA[<p>Quick setup of ignore files for Git. You can of course set these up per repo, but that gets a little old. Instead you can setup a single ignore file and link to it so that every repo refers to it.</p>

<p>For example, create a git ignore file in your home directory:</p>

<p><code>
~/.gitignore_global
</code></p>

<p>Fill it with regular files that you want to ignore:</p>

<p>``` bash</p>

<h1>.gitignore</h1>

<h1>Railo files</h1>

<h6>#</h6>

<p>WEB-INF/</p>

<h1>Sublime files</h1>

<h6>#</h6>

<p><em>.sublime-project
</em>.sublime-workspace</p>

<h1>Misc files</h1>

<h6>#</h6>

<p><em>.yml
</em>.buildpath
<em>.settings
</em>.cache</p>

<h1>OS generated files</h1>

<h6>#</h6>

<p>.DS_Store
ehthumbs.db
Icon?
Thumbs.db
.project
```</p>

<p>Edit your main git config file (~/.gitconfig) and add a reference to this new global ignore file:</p>

<p>``` bash
[user]</p>

<pre><code>    name = xxxx xxxx
    email = joe@xxx.com
</code></pre>

<p>[core]</p>

<pre><code>    excludesfile = /Users/computername/.gitignore_global
</code></pre>

<p>```</p>

<p>Or you can run the following command:</p>

<p><code>
git config --global core.excludesfile ~/.gitignore_global
</code></p>

<p>Now all your git projects will share the same ignore file :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Showing hidden files in Finder on mac osx]]></title>
    <link href="http://chapter31.com/2013/01/21/showing-hidden-files-in-finder-on-mac-osx/"/>
    <updated>2013-01-21T22:37:37+11:00</updated>
    <id>http://chapter31.com/2013/01/21/showing-hidden-files-in-finder-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Short and sweet, MAC OSX has this annoying trait where hidden files (dotfiles) are not visible by default in Finder. No probs, I'll just go to the "View" menu and turn them on. Nope...nada, zip.</p>

<p>Turns out you have to enter a command in the terminal, nice. Here it is for future reference:</p>

<p><code>
defaults write com.apple.finder AppleShowAllFiles TRUE
</code></p>

<p>Then kill Finder to have the changes take effect.</p>

<p><code>
killall Finder
</code></p>

<p>If you ever want to turn hidden files off?</p>

<p><code>
defaults write com.apple.finder AppleShowAllFiles FALSE
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Downloading youtube videos]]></title>
    <link href="http://chapter31.com/2013/01/01/downloading-youtube-videos/"/>
    <updated>2013-01-01T13:48:27+11:00</updated>
    <id>http://chapter31.com/2013/01/01/downloading-youtube-videos</id>
    <content type="html"><![CDATA[<p>I wanted to grab some youtube videos for the kids and found this cool <a href="http://rg3.github.com/youtube-dl/">CLI utility called youtube-dl</a> to handle it. I downloaded it from the website (you may need to chmod 755):
<code>
wget https://github.com/downloads/rg3/youtube-dl/youtube-dl -O /usr/local/bin/youtube-dl
</code></p>

<p>However you can get it via brew if you want:
<code>
brew install youtube-dl
</code></p>

<p>The basic process is the following:
<code>
youtube-dl [video URL]
</code></p>

<p>By default that should download the highest quality format available (in case you didn't know, youtube usually has multiple versions of a file for different qualities etc). If you want to see what formats are available, try:
<code>
youtube-dl -F [URL]
</code></p>

<p>For example:
<code>bash
youtube-dl -F http://www.youtube.com/watch?v=iThX9rbOqXY
[youtube] Setting language
[youtube] iThX9rbOqXY: Downloading video webpage
[youtube] iThX9rbOqXY: Downloading video info webpage
[youtube] iThX9rbOqXY: Extracting video information
Available formats:
34 : flv [360x640]
18 : mp4 [360x640]
43 : webm [360x640]
5 : flv [240x400]
17 : mp4 [144x176]
</code></p>

<p>Then you can select whichever you want to download by choosing the number next to the format you want:
<code>
youtube-dl -f [format number] [URL]
</code></p>

<p>So if I wanted the highest quality mp4 available in the example above I'd Â type (note the number corresponds to the video I want) the following, note the lowercase f:
<code>
youtube-dl -f 18 http://www.youtube.com/watch?v=iThX9rbOqXY
</code></p>

<p>You can also pass in a file containing a list of URLs (one on ea to handle batch downloading:
<code>
youtube-dl -a urls.txt
</code></p>

<p>If you want to rename the file as you download it (by default it's the filename on youtube which isn't really that useful):
<code>
youtube-dl -f 18 -o "myfilename.mp4" [URL]
</code></p>

<p>You can do other cool things like extracting the audio only (and choosing which audio format you want). There are also <a href="http://rg3.github.com/youtube-dl/documentation.html#d4">LOTS of sites</a> that are supported...not just youtube.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a powerset in ColdFusion]]></title>
    <link href="http://chapter31.com/2012/10/04/generating-a-powerset-in-coldfusion/"/>
    <updated>2012-10-04T21:20:46+10:00</updated>
    <id>http://chapter31.com/2012/10/04/generating-a-powerset-in-coldfusion</id>
    <content type="html"><![CDATA[<p>I recently needed to generate a <a href="http://en.wikipedia.org/wiki/Power_set">powerset</a> (a set of all subsets) of 3 HTML select boxes. The idea was that a user could choose 1-many options from each box, and they had to choose a value from all 3 boxes (none could be empty).</p>

<p>Select #1 had 4 values<br/>
Select #2 had 7 values<br/>
Select #3 had 13 values</p>

<p>Now, I needed to generate every possible permutation for these 3 select boxes based on the rules I defined above. That meant the possible number of combinations for each box was:</p>

<p>Select #1 had 16<em> possible combinations<br/>
Select #2 had 128</em> possible combinations<br/>
Select #3 had 8192* possible combinations</p>

<p>* It was actually 1 less than that, because a powerset take into consideration an empty selection, so in reality the numbers would have been 15, 127 and 8191.</p>

<p>This was calculated using 2n, where <em>n</em> is an number (integer) of options in a set, so 24, 27 and 213</p>

<p>Now, how did I go about calculating these powersets? I cheated :smile:</p>

<p>I grabbed a JavaScript function from <a href="http://rosettacode.org/wiki/Power_set#JavaScript">Rosetta Code</a> and ported it to ColdFusion.</p>

<p>Here is the function to generate a powerset from a set (array) of data:</p>

<p>``` javascript
public array function calculate(required array data)
{
  var ps = [""];
  var d = arguments.data;
  var lenData = arrayLen(d);
  var lenPS = 0;
  for (var i=1; i LTE lenData; i++)
  {</p>

<pre><code>lenPS = arrayLen(ps);
for (var j = 1; j LTE lenPS; j++)
{
  arrayAppend(ps, listAppend(ps[j], d[i]));
}
</code></pre>

<p>  }
  return ps;
}
```</p>

<p>A sample powerset of 4 values (in this case 1,2,3,4) would be:</p>

<p>``` javascript
var Powerset = new Powerset();
var res = Powerset.calculate([1,2,3,4]);</p>

<p>Outputs:
["","1","2","1,2","3","1,3","2,3","1,2,3","4","1,4","2,4","1,2,4","3,4","1,3,4","2,3,4","1,2,3,4"]
```</p>

<p>By the way, my total combination across all 3 sets was a mere 16,777,216.</p>

<p><a href="https://github.com/michaelsharman/Powerset">Grab from github</a> if you prefer the CFC</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modifying FW/1 variables.framework properties]]></title>
    <link href="http://chapter31.com/2012/09/30/modifying-fw1-variables-framework-properties/"/>
    <updated>2012-09-30T16:54:59+10:00</updated>
    <id>http://chapter31.com/2012/09/30/modifying-fw1-variables-framework-properties</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/seancorfield/fw1/">FW/1</a> gives you a nice, clean way to manage framework configuration properties. They're all wrapped up inside Application.cfc in a structure called <em>variables.framework</em>, <a href="https://github.com/seancorfield/fw1/wiki/Developing-Applications-Manual">you can read more about them here</a> under <em>Configuring FW/1 Applications</em>.</p>

<p><a href="http://www.learnosity.com">Our applications</a> often have a need to use different values for these properties, depending on which environment the application is running in (development, testing, staging, production etc). An example of this might be <em>reloadApplicationOnEveryRequest</em>, which we want as <em>true</em> in development, but <em>false</em> elsewhere else.</p>

<p>So our defaults (at the top of Application.cfc) might be to set the reload property as false:</p>

<p><code>javascript
variables.framework = {
  reloadApplicationOnEveryRequest = false,
  disableReloadApplication = true;
  ...
}
</code></p>

<p>These are good values for production, but we want to override them if we're in development. Here's how:</p>

<p>``` javascript
/<strong>
* @hint We need to override variables.framework values, only way to do this is pre-fw/1 onRequestStart() as setupRequest() is called later in the call stack
</strong>/
public any function onRequestStart(string targetPath)
{
  if (isDefined("application.config.mode"))
  {</p>

<pre><code>if (application.config.mode == "dev")
{
  variables.framework.reloadApplicationOnEveryRequest = true;
  variables.framework.disableReloadApplication = false;
}
</code></pre>

<p>  }
  super.onRequestStart(targetPath);
}
```</p>

<p>You can see in the example above that we override the default values we set initially, so that if we're in <em>development</em> mode we not only <a href="http://www.chapter31.com/2012/09/27/preventing-fw1-from-reinitialising-an-app-via-the-url/">have the ability to reload the application (using a custom property called <em>disableReloadApplication</em>)</a>, but we also reload the application on every request.</p>

<p>2 things to note here, are that we can't use setupRequest() for this, as it's called too late by framework.cfc and won't enable us to override any <em>variables.framework</em> properties. So instead we use onRequestStart(), which gives us the 2nd thing to watch out for, and that is that you must be careful to call super.onRequestStart(targetPath); at the conclusion of this method. Or you might get strange results.</p>
]]></content>
  </entry>
  
</feed>
