<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ColdFusion | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/coldfusion/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2015-05-08T08:54:30+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating a powerset in ColdFusion]]></title>
    <link href="http://chapter31.com/2012/10/04/generating-a-powerset-in-coldfusion/"/>
    <updated>2012-10-04T21:20:46+10:00</updated>
    <id>http://chapter31.com/2012/10/04/generating-a-powerset-in-coldfusion</id>
    <content type="html"><![CDATA[<p>I recently needed to generate a <a href="http://en.wikipedia.org/wiki/Power_set">powerset</a> (a set of all subsets) of 3 HTML select boxes. The idea was that a user could choose 1-many options from each box, and they had to choose a value from all 3 boxes (none could be empty).</p>

<p>Select #1 had 4 values<br/>
Select #2 had 7 values<br/>
Select #3 had 13 values</p>

<p>Now, I needed to generate every possible permutation for these 3 select boxes based on the rules I defined above. That meant the possible number of combinations for each box was:</p>

<p>Select #1 had 16<em> possible combinations<br/>
Select #2 had 128</em> possible combinations<br/>
Select #3 had 8192* possible combinations</p>

<p>* It was actually 1 less than that, because a powerset take into consideration an empty selection, so in reality the numbers would have been 15, 127 and 8191.</p>

<p>This was calculated using 2n, where <em>n</em> is an number (integer) of options in a set, so 24, 27 and 213</p>

<p>Now, how did I go about calculating these powersets? I cheated :smile:</p>

<p>I grabbed a JavaScript function from <a href="http://rosettacode.org/wiki/Power_set#JavaScript">Rosetta Code</a> and ported it to ColdFusion.</p>

<p>Here is the function to generate a powerset from a set (array) of data:</p>

<p>``` javascript
public array function calculate(required array data)
{
  var ps = [""];
  var d = arguments.data;
  var lenData = arrayLen(d);
  var lenPS = 0;
  for (var i=1; i LTE lenData; i++)
  {</p>

<pre><code>lenPS = arrayLen(ps);
for (var j = 1; j LTE lenPS; j++)
{
  arrayAppend(ps, listAppend(ps[j], d[i]));
}
</code></pre>

<p>  }
  return ps;
}
```</p>

<p>A sample powerset of 4 values (in this case 1,2,3,4) would be:</p>

<p>``` javascript
var Powerset = new Powerset();
var res = Powerset.calculate([1,2,3,4]);</p>

<p>Outputs:
["","1","2","1,2","3","1,3","2,3","1,2,3","4","1,4","2,4","1,2,4","3,4","1,3,4","2,3,4","1,2,3,4"]
```</p>

<p>By the way, my total combination across all 3 sets was a mere 16,777,216.</p>

<p><a href="https://github.com/michaelsharman/Powerset">Grab from github</a> if you prefer the CFC</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modifying FW/1 variables.framework properties]]></title>
    <link href="http://chapter31.com/2012/09/30/modifying-fw1-variables-framework-properties/"/>
    <updated>2012-09-30T16:54:59+10:00</updated>
    <id>http://chapter31.com/2012/09/30/modifying-fw1-variables-framework-properties</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/seancorfield/fw1/">FW/1</a> gives you a nice, clean way to manage framework configuration properties. They're all wrapped up inside Application.cfc in a structure called <em>variables.framework</em>, <a href="https://github.com/seancorfield/fw1/wiki/Developing-Applications-Manual">you can read more about them here</a> under <em>Configuring FW/1 Applications</em>.</p>

<p><a href="http://www.learnosity.com">Our applications</a> often have a need to use different values for these properties, depending on which environment the application is running in (development, testing, staging, production etc). An example of this might be <em>reloadApplicationOnEveryRequest</em>, which we want as <em>true</em> in development, but <em>false</em> elsewhere else.</p>

<p>So our defaults (at the top of Application.cfc) might be to set the reload property as false:</p>

<p><code>javascript
variables.framework = {
  reloadApplicationOnEveryRequest = false,
  disableReloadApplication = true;
  ...
}
</code></p>

<p>These are good values for production, but we want to override them if we're in development. Here's how:</p>

<p>``` javascript
/<strong>
* @hint We need to override variables.framework values, only way to do this is pre-fw/1 onRequestStart() as setupRequest() is called later in the call stack
</strong>/
public any function onRequestStart(string targetPath)
{
  if (isDefined("application.config.mode"))
  {</p>

<pre><code>if (application.config.mode == "dev")
{
  variables.framework.reloadApplicationOnEveryRequest = true;
  variables.framework.disableReloadApplication = false;
}
</code></pre>

<p>  }
  super.onRequestStart(targetPath);
}
```</p>

<p>You can see in the example above that we override the default values we set initially, so that if we're in <em>development</em> mode we not only <a href="http://www.chapter31.com/2012/09/27/preventing-fw1-from-reinitialising-an-app-via-the-url/">have the ability to reload the application (using a custom property called <em>disableReloadApplication</em>)</a>, but we also reload the application on every request.</p>

<p>2 things to note here, are that we can't use setupRequest() for this, as it's called too late by framework.cfc and won't enable us to override any <em>variables.framework</em> properties. So instead we use onRequestStart(), which gives us the 2nd thing to watch out for, and that is that you must be careful to call super.onRequestStart(targetPath); at the conclusion of this method. Or you might get strange results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preventing FW/1 from reinitialising an app via the URL]]></title>
    <link href="http://chapter31.com/2012/09/27/preventing-fw1-from-reinitialising-an-app-via-the-url/"/>
    <updated>2012-09-27T22:57:23+10:00</updated>
    <id>http://chapter31.com/2012/09/27/preventing-fw1-from-reinitialising-an-app-via-the-url</id>
    <content type="html"><![CDATA[<p>One of the things that <a href="https://github.com/seancorfield/fw1">FW/1</a> allows you to do is configure a reload "key" and "password" which you can use to reinit your application via URL.</p>

<p>So inside your Application.cfc you might have:</p>

<p><code>
variables.framework = {
  reload = 'reinit',
  password = "mysecretkey"
  …
}
</code></p>

<p>So you can reinit your application (flush the application scope by re-running onApplicationStart()) by calling something like:</p>

<p><code>
http://www.example.com/?reinit=mysecretkey
</code></p>

<p>The "reload" and "password" properties can be changed to whatever you want for securities sake.</p>

<p>We wanted a little extra security, that being the option to never allow an application to be reinitialised via a URL. Typically we want this in a production environment only. What you lose in flexibility, being able to reinit the application quickly and easily after a release/deployment, you (arguably) gain in security. Perhaps this is being a little over-cautious, but we like to be better safe than sorry, especially when reducing possible DOS vectors. Also it makes life easier when dealing with system administrators and/or security audits :)</p>

<p>To achieve this we simply added a new property to the <em>variables.framework</em> structure inside Application.cfc, called "disableReloadApplication", which accepts true|false. If <em>true</em>, then even if you know the "reload" and "password" values…the application cannot be reinitialised via the URL. So the following would NOT reinit the app:</p>

<p><code>
http://www.example.com/?reinit=mysecretkey
</code></p>

<p>A few extra lines were needed inside framework.cfc to make this happen:</p>

<p>setupFrameworkDefaults()</p>

<p><code>
…
if ( !structKeyExists(variables.framework, 'disableReloadApplication') ) {
  variables.framework.disableReloadApplication = false;
}
…
</code></p>

<p>and isFrameworkReloadRequest()</p>

<p><code>
return ( !variables.framework.disableReloadApplication &amp;&amp;
  ((isDefined( 'URL' ) &amp;&amp;
  structKeyExists( URL, variables.framework.reload ) &amp;&amp;
  URL[ variables.framework.reload ] == variables.framework.password ) ||
  variables.framework.reloadApplicationOnEveryRequest));
</code></p>

<p>Although we could have extended framework.cfc with our own file (and just defined these 2 methods), we just altered the original framework.cfc as we store a local copy in source control that all our projects can draw from.</p>

<p><a href="https://github.com/michaelsharman/fw1">Here is the fork of FW/1</a> (really just a change to framework.cfc), version 2.0.1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a mail server to a Railo instance]]></title>
    <link href="http://chapter31.com/2012/09/26/adding-a-mail-server-to-a-railo-instance/"/>
    <updated>2012-09-26T22:04:00+10:00</updated>
    <id>http://chapter31.com/2012/09/26/adding-a-mail-server-to-a-railo-instance</id>
    <content type="html"><![CDATA[<p>We turn off all GUI based administration consoles in our production environments, this includes Railo's admin area.</p>

<p>If you need to configure your Railo instance to include an SMTP server, you can add a line in WEB-INF/railo/railo-web.xml.cfm</p>

<p>Open up that file (probably as sudo), look for the <mail> tag (which is empty by default) and insert the following:</p>

<p><code>
&lt;server port="25" smtp="127.0.0.1" /&gt;
</code></p>

<p>The "smtp" attribute should be the IP address of your SMTP server. Also, if your SMTP server requires a username and password, you can add them like so:</p>

<p><code>
&lt;server port="25" smtp="127.0.0.1" username="myusername" password="mypassword" /&gt;
</code></p>

<p>At the end of the day your config entry should look something like:</p>

<p><code>
&lt;mail log="{railo-web}/logs/mail.log"&gt;
  &lt;server port="25" smtp="127.0.0.1"/&gt;
&lt;/mail&gt;
</code></p>

<h2>Update - January 2013</h2>

<p>I was googling something else when I came across a post on the Railo groups indicating that by default only <em>error</em> logging is enabled for mail. This means that in the event of an error (where Railo is unable to send the mail) you can check the WEB-INF/railo/logs/mail.log for information.</p>

<p>However, you can turn on <em>info</em> logging as well to presumably track whenever mail is actually sent. This can be done in either railo-server.xml or railo-web.xml. Eg:</p>

<p><code>
&lt;mail log-level="info" log="{railo-web}/logs/mail.log"&gt;
  &lt;server port="25" smtp="127.0.0.1"/&gt;
&lt;/mail&gt;
</code></p>

<p>This is really handy for us as we disallow access to the Railo admin GUI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whitespace issues in cfscript based functions]]></title>
    <link href="http://chapter31.com/2012/09/20/whitespace-issues-in-cfscript-based-functions/"/>
    <updated>2012-09-20T17:28:08+10:00</updated>
    <id>http://chapter31.com/2012/09/20/whitespace-issues-in-cfscript-based-functions</id>
    <content type="html"><![CDATA[<p>Ok now we all know that ColdFusion is kind of lame when it comes to whitespace management, unless you specifically have "whitespace management" turned on for your server.</p>

<p>I have a function that is used to build the <em>href</em> value of a hyperlink. Nothing special there. However when I viewed the source of the page I was a little surprised to see a mountain of whitespace coming back from the function.</p>

<p>All I do is return a string from the function, I don't output any text from within the function.</p>

<p>Here it is:</p>

<p><code>javascript
public string function getFullPageURI(required string pagename)
{
  var pages = new lib.services.pages();
  var page = pages.getPageByNavURL(arguments.pagename, getId());
  return page.getPageURI();
}
</code></p>

<p>And the link source:</p>

<p><img src="/images/uploads/2012/09/Screen-shot-2012-09-20-at-5.24.32-PM.png" alt="" /></p>

<p>Hmm, could that suck any more? Now what happens if I add output="false" (not particularly intuitive) to the end of the function, like this:</p>

<p><code>javascript
public string function getFullPageURI(required string pagename) output="false"
{
  var pages = new lib.services.pages();
  var page = pages.getPageByNavURL(arguments.pagename, getId());
  return page.getPageURI();
}
</code></p>

<p>Now I get:</p>

<p><img src="/images/uploads/2012/09/Screen-shot-2012-09-20-at-5.25.54-PM.png" alt="" /></p>

<p>Sorry but that's just insane. cfscript should behave like cfsilent all the time unless you specify a writeOutput();</p>

<p>Hope this helps any other people out there. The lesson learned is that you can specify output="false" in a cfscript based function, but ONLY AFTER THE METHOD SIGNATAURE!</p>

<p>So if you did this:</p>

<p><code>javascript
public string output="false" function getFullPageURI(required string pagename)
</code></p>

<p>If would fail. It needs to occur after the parens.</p>
]]></content>
  </entry>
  
</feed>
