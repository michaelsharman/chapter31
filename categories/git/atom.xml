<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/git/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2013-12-16T14:42:20+11:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Error writing git commit messages with vi]]></title>
    <link href="http://chapter31.com/2013/06/08/error-writing-git-commit-messages-with-vi/"/>
    <updated>2013-06-08T23:24:00+10:00</updated>
    <id>http://chapter31.com/2013/06/08/error-writing-git-commit-messages-with-vi</id>
    <content type="html"><![CDATA[<p>I typically write my git commit messages in the terminal, but today I wanted to write a multi-line comment so I left out the <em>-m</em> argument to <em>git commit</em> so it would open up my default editor, which is <em>vi</em>:</p>

<p><code>bash
git commit
</code></p>

<p>I wrote my comment, saved and exit but got an error:</p>

<p><code>bash
$ git commit
error: There was a problem with the editor 'vi'.
Please supply the message using either -m or -F option.
</code></p>

<p>A quick google and I <a href="http://tooky.co.uk/2010/04/08/there-was-a-problem-with-the-editor-vi-git-on-mac-os-x.html">found the solution</a>, I thought I'd repost it here for myself as well as others.</p>

<p>There are a couple of solutions offered in that article, for me I just set the full path to <em>vi</em> with a <em>-f</em> flag in my .gitconfig:</p>

<p><code>bash
[core]
  editor = /usr/bin/vi -f
</code></p>

<p>As an FYI...if you want to see the values in git config, you can run this command in your project and it will list your global and project configuration:</p>

<p><code>bash
git config -l
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from bitbucket to github]]></title>
    <link href="http://chapter31.com/2013/05/08/migrating-from-bitbucket-to-github/"/>
    <updated>2013-05-08T10:31:00+10:00</updated>
    <id>http://chapter31.com/2013/05/08/migrating-from-bitbucket-to-github</id>
    <content type="html"><![CDATA[<p>Migrating repositories between <a href="https://bitbucket.org/">bitbucket</a> and <a href="http://github.com">github</a> couldn't be simpler thanks to the design nature of <acronym title="Distrubuted Version Control System">DVCS</acronym> like git because the entire history is already located on your machine within your projects <em>.git</em> folder. All you're really doing is changing a <em>remote</em>.</p>

<p>Open a terminal and navigate to your project directory.</p>

<h2>TLDR;</h2>

<p>For those who just want the commands with no explanation</p>

<p><code>bash
git remote rename origin bitbucket
git remote add origin git@github.com:[username]/[repo_name].git
git push -u origin master
git remote rm bitbucket
</code></p>

<h2>Explanation of steps</h2>

<p>Check which remote(s) you have now:</p>

<p><code>bash
$ git remote -v show
origin  git@bitbucket.org:[username]/[repo_name].git (fetch)
origin  git@bitbucket.org:[username]/[repo_name].git (push)
</code></p>

<p>Now rename your existing <em>origin</em> to <em>bitbucket</em> (or whatever you want to call it):</p>

<p><code>bash
git remote rename origin bitbucket
</code></p>

<p> Double check your change:</p>

<p><code>bash
$ git remote -v show
bitbucket   git@bitbucket.org:[username]/[repo_name].git (fetch)
bitbucket   git@bitbucket.org:[username]/[repo_name].git (push)
</code></p>

<p>Now add github as your <em>origin</em> and push the repository:</p>

<p><code>bash
git remote add origin git@github.com:[username]/[repo_name].git
git push -u origin master
</code></p>

<p>Check what remotes you have:</p>

<p><code>bash
$ git remote -v show
bitbucket   git@bitbucket.org:[username]/[repo_name].git (fetch)
bitbucket   git@bitbucket.org:[username]/[repo_name].git (push)
origin  git@github.com:[username]/[repo_name].git (fetch)
origin  git@github.com:[username]/[repo_name].git (push)
</code></p>

<p>Removed the old remote (<em>bitbucket</em>):</p>

<p><code>bash
git remote rm bitbucket
</code></p>

<p>Finally, check your remotes:</p>

<p><code>bash
$ git remote -v show
origin  git@github.com:[username]/[repo_name].git (fetch)
origin  git@github.com:[username]/[repo_name].git (push)
</code></p>

<p>Note that at the end of this, you still have your code on bitbucket, you've just pushed your repository to github and pointed your <em>origin</em> remote to there. To fully <em>clean up</em> you need to delete your repo from bitbucket.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a global ignore file for git]]></title>
    <link href="http://chapter31.com/2013/01/21/adding-a-global-ignore-file-for-git/"/>
    <updated>2013-01-21T23:02:46+11:00</updated>
    <id>http://chapter31.com/2013/01/21/adding-a-global-ignore-file-for-git</id>
    <content type="html"><![CDATA[<p>Quick setup of ignore files for Git. You can of course set these up per repo, but that gets a little old. Instead you can setup a single ignore file and link to it so that every repo refers to it.</p>

<p>For example, create a git ignore file in your home directory:</p>

<p><code>
~/.gitignore_global
</code></p>

<p>Fill it with regular files that you want to ignore:</p>

<p>``` bash</p>

<h1>.gitignore</h1>

<h1>Railo files</h1>

<h6>#</h6>

<p>WEB-INF/</p>

<h1>Sublime files</h1>

<h6>#</h6>

<p><em>.sublime-project
</em>.sublime-workspace</p>

<h1>Misc files</h1>

<h6>#</h6>

<p><em>.yml
</em>.buildpath
<em>.settings
</em>.cache</p>

<h1>OS generated files</h1>

<h6>#</h6>

<p>.DS_Store
ehthumbs.db
Icon?
Thumbs.db
.project
```</p>

<p>Edit your main git config file (~/.gitconfig) and add a reference to this new global ignore file:</p>

<p>``` bash
[user]</p>

<pre><code>    name = xxxx xxxx
    email = joe@xxx.com
</code></pre>

<p>[core]</p>

<pre><code>    excludesfile = /Users/computername/.gitignore_global
</code></pre>

<p>```</p>

<p>Or you can run the following command:</p>

<p><code>
git config --global core.excludesfile ~/.gitignore_global
</code></p>

<p>Now all your git projects will share the same ignore file :)</p>
]]></content>
  </entry>
  
</feed>
