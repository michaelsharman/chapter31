<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/mac/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2013-05-22T22:26:49+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache permission denied on Mac OSX Lion]]></title>
    <link href="http://chapter31.com/2012/06/05/apache-permission-denied-on-mac-osx-lion/"/>
    <updated>2012-06-05T14:52:00+10:00</updated>
    <id>http://chapter31.com/2012/06/05/apache-permission-denied-on-mac-osx-lion</id>
    <content type="html"><![CDATA[<p>I've just upgraded to OSX Lion and had some trouble getting Apache to load a vhost. I kept getting a 403 permission denied error, but all my vhosts had the correct permission directives set.</p>

<p>Now by default your webserver document root is located in <em>/Library/WebServer/Documents</em>. I don't really like that for my local machine, I'd rather store web files under my user account. Just tends to make things easier.</p>

<p>However...if you're getting a 403 error, and something like this in your apache error log (/var/log/apache2/error_log):</p>

<pre><code>[Wed Jun 06 00:36:02 2012] [crit] [client 127.0.0.1] (13)Permission denied: /Users/[username]/Documents/.htaccess pcfg_openfile: unable to check htaccess file, ensure it is readable
</code></pre>

<p>Then check your directory permissions. The interesting thing is that I don't have an .htaccess file in my Documents directory. Even adding one did nothing, so I'm not quite sure why Apache was complaining about this.</p>

<p>The answer was simple, I didn't have "group" read or execute permissions on the <em>Documents</em> directory, once I ran a chmod...everything started working ok :)</p>

<pre><code>chmod 755 Documents
</code></pre>

<p>The actual path to my site was <em>/Users/[username]/Documents/workspaces/sitename/htdocs</em>, but still...without the requisite permissions on the <em>Documents</em> folder Apache couldn't access the vhost.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strange linefeed characters appearing on Mac]]></title>
    <link href="http://chapter31.com/2012/05/24/strange-linefeed-characters-appearing-on-mac/"/>
    <updated>2012-05-24T14:14:47+10:00</updated>
    <id>http://chapter31.com/2012/05/24/strange-linefeed-characters-appearing-on-mac</id>
    <content type="html"><![CDATA[<p>Had a funny situation today where I was emailed a bash program file, but simply downloading the attachment from gmail (in Chrome) added a linefeed (\r) to the file.</p>

<p>This is strange because I never actually opened the file to edit, so I'm not sure what was writing those chars to the file. I'm on a Mac (OSX 10.6.8), so I get the line feed character in general, but just not in this case as the file was never opened.</p>

<p>The following command shows (among other things) the non-printing characters:</p>

<p><code>od -c filename | sed 4q</code></p>

<p><img src="/images/uploads/2012/05/dos2unix_before1.png" alt="" /></p>

<p>You can see the offending <em>\r</em> which was breaking the bash program. The unix tool <em>dos2unix</em> was suggested to clean up the file. Unfortunately this wasn't available on Mac by default. MacPorts to the rescue (I assume homebrew would be a good option as well):</p>

<p><code>bash
sudo port install dos2unix
Password:
---&gt;  Fetching dos2unix
---&gt;  Attempting to fetch dos2unix-3.1.tar.gz from http://fresh.t-systems-sfr.com/linux/src/
---&gt;  Verifying checksum(s) for dos2unix
---&gt;  Extracting dos2unix
---&gt;  Configuring dos2unix
---&gt;  Building dos2unix with target all
---&gt;  Staging dos2unix into destroot
---&gt;  Installing dos2unix 3.1_0
---&gt;  Activating dos2unix 3.1_0
---&gt;  Cleaning dos2unix
</code></p>

<p>Then run the program to clean up the invalid line feed (on 2 files).</p>

<p><code>bash
dos2unix -n dirwatcher2 dirwatcher2_2
dos2unix: converting file dirwatcher2 to file dirwatcher2_2 in UNIX format ...
dos2unix -n processPDF processPDF_2
dos2unix: converting file processPDF to file processPDF_2 in UNIX format ...
</code></p>

<p>Nice! The changes are:</p>

<p><img src="/images/uploads/2012/05/dos2unix_after.png" alt="" /></p>

<p>No \r</p>

<p>:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning voice over off permanently on Max OSX]]></title>
    <link href="http://chapter31.com/2012/03/14/turning-voice-over-off-permanently-on-max-osx/"/>
    <updated>2012-03-14T16:41:04+11:00</updated>
    <id>http://chapter31.com/2012/03/14/turning-voice-over-off-permanently-on-max-osx</id>
    <content type="html"><![CDATA[<p>One of the keyboard shortcuts I often use is command-F6, but I seem to accidentally hit command-F5 on most occasions :(</p>

<p>Problem with this is that the god awful "voice over" starts yapping away. Well if you're like me and know that you'll pretty much never want this enabled (at least for now!) then here's how you turn it off permanently.</p>

<ol>
<li>Open up system preferences</li>
<li>Click on keyboard</li>
<li>Go to the keyboard shortcuts tab</li>
<li>Choose universal access from the list on the left</li>
<li>Uncheck the "Turn voice over on or off" checkbox</li>
</ol>


<p>Breathe a sigh of relief :)</p>

<p><img src="/images/uploads/2012/03/sys_prefs.jpg" alt="mac system preferences" /></p>

<p><img src="/images/uploads/2012/03/voiceover_off.jpg" alt="Mac voice over off" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Importing a csv into MySQL using the command line]]></title>
    <link href="http://chapter31.com/2010/11/15/importing-a-csv-into-mysql-using-the-command-line/"/>
    <updated>2010-11-15T10:38:10+11:00</updated>
    <id>http://chapter31.com/2010/11/15/importing-a-csv-into-mysql-using-the-command-line</id>
    <content type="html"><![CDATA[<p><strong><em>UPDATE 16th Nov 2010: I had some issues with the import which I noted in the first code example below</em></strong></p>

<p>Today I had to import csv into a single mysql table. The destination table only had 5 columns and the csv was around 22MB (around 400,000 records). The csv also contained more columns that I needed for the import. Sometimes I'll use a GUI to do this as I usually have one open, but it never ceases to amaze me how much slower GUI tools are compared to the command line.</p>

<p>To import the file via Aqua Data Studio took around 20 mins to import on my machine (over the network to the staging server took over 40mins!). As I need to do this more and more I though I'd look at a few command line options. I actually wanted to do this in 2 steps; firstly import the csv, them export it as a sql file and import it into "production" from there.</p>

<p>First we need to import the original .csv, ignoring certrain columns which the destination table didn't need. Why not open this in excel/open office and <code>clean</code> the csv first? Too many rows, by default open office won't read that many rows, plus it slows the machine down to even try that, double plus it's super simple to ignore columns you don't need:</p>

<p>``` javascript
mysql> LOAD DATA LOCAL INFILE '/pathtofile/myfile.csv'</p>

<pre><code>-&gt; INTO TABLE MyTable
-&gt; FIELDS TERMINATED BY ',' 
-&gt; ENCLOSED BY '"'
-&gt; LINES TERMINATED BY '\r\n' 
-&gt; (col1,col2,@ignore,col3,col4,@ignore,col5);
</code></pre>

<p>```</p>

<p>Note the LINES TERMINATED BY...you really need '\r\n', especially if you .csv had been generated from a Windows machine! Otherwise your import will be kinda funky :(</p>

<p>Also note the ENCLOSED BY '"', if you skip that option then any data in the .csv what was enclosed by double quotes (strings for eg) will actually import the double quotes into your database which is more than likely not what you want.</p>

<p>Note the <code>@ignore</code> user variables specified in the column list. Basically that's saying that there are extra columns in the csv which I don't want to import into the database. So by assigning the csv column to a user variable and not assigning the variable to an actual table column you effectively ignore it. You can call the user variable anything you want (prefixed with <code>@</code> of course). Calling it <code>@ignore</code> made sense to me.</p>

<p>Great now we have our data in the table, took about 2 seconds to run as opposed to 20min in the GUI tool :/</p>

<p>Then I had to quickly massage the data via sql as defined by the business rules as the original csv was <code>incomplete</code> in terms of the application requirements. After that was done I exported the table into a sql file:</p>

<p><code>javascript
mysqldump -uroot -p [local_database_name] [table_to_export] --skip-opt --compact --disable-keys --extended-insert --no-create-info &gt; mytable.sql
</code></p>

<p>The options used here skip things in the .sql file like CREATE TABLE etc. They also combine INSERTS and disable the keys to improve the speed of the import. Finally import the production ready sql into:</p>

<p><code>javascript
mysql -uroot -p [production_database] &lt; mytable.sql
</code></p>

<p>Again, the point of this is pure performance. The speed difference is incredible, even on a local machine I don't know why anyone would bother using GUI tools to import/export data unless you were working with tiny databases/tables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case sensitive development on Mac OS X]]></title>
    <link href="http://chapter31.com/2010/10/04/case-sensitive-development-on-mac-os-x/"/>
    <updated>2010-10-04T22:36:00+11:00</updated>
    <id>http://chapter31.com/2010/10/04/case-sensitive-development-on-mac-os-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.learnosity.com/">At work</a> most of the developers are on Mac OS X but our staging and production environments are Linux based. This means development is case insensitive but stage/production is case sensitive. Although we have development guidelines/standards which dictate file and database naming conventions etc, human error can still occur (in terms of referencing files with a different "case"). We also use a few open source packages where we obviously don't have control over the naming of files or the references to database tables within those files.</p>

<p>Why is this an issue?</p>

<p>Linux is a case sensitive environment, so calling <em>myClass.cfc</em> when the actual name of the file is <em>MyClass.cfc</em> will fail on Linux, but will be ok during development as Mac OS X isn't case sensitive by default. The same would happen for MySQL table references in the codebase as tables are stored as files on the file system.</p>

<p>This has been an ongoing issue for us over the years particularly with open source libraries we may be using. So last week I decided to change my working environment to avoid finding these issues only once code had been deployed to staging. Overall the process was simple and really only took an hour or so (and most of that was waiting for files to copy across to the new location).</p>

<p>What I did was to create a case sensitive partition on the Mac and move my "Workspace" (project folders and files) and "MySQL" install to the new partition. Now any case sensitive issues will be found during development which is much preferable to finding them in staging/production :)</p>

<p>Setting up the new partition was done using <a href="http://www.coriolis-systems.com/iPartition.php">iPartition</a> but you could just as easily use the Disk Utility. I setup a new 50GB jhfsx partition (HFS Journaled case sensitive). Once that was done I copied my <em>workspace</em> folder across, then the <em>MySQL</em> folder. Finally, create symlinks for both the workspace and mysql paths so I didn't run into any pathing issues in my apache conf etc.</p>

<p>Steps:</p>

<ol>
<li><p>Create your case sensitive <em>jhfsx (HFS Journaled case sensitive)</em> partition. 50GB was fine for me; your requirements may vary. Remember that you need enough space for your MySQL databases and your project files (both current and future).</p></li>
<li><p>Stop MySQL</p>

<blockquote><p>$ mysqladmin -uroot -p shutdown</p></blockquote></li>
<li><p>Copy the MySQL and Workspaces folders to the new paritition (I named my new partition "Learnosity")</p>

<blockquote><p>$ sudo cp -rp /usr/local/mysql /Volumes/Learnosity
$ sudo cp -rp /users/michaelsharman/Workspaces /Volumes/Learnosity</p></blockquote></li>
<li><p>symlink your previous paths to the new partition to save you having to remap apache confs and MySQL commands etc</p>

<blockquote><p>$ sudo ln -sf /Volumes/Learnosity/mysql /usr/local/mysql
$ sudo ln -sf /Volumes/Learnosity/Workspaces /users/michaelsharman/Workspaces</p></blockquote></li>
<li><p>Set the MySQL <em>lower_case_table_names</em> to 0 (same as it is on Linux by default) by adding this line in /etc/my.cnf</p>

<blockquote><p>lower_case_table_names = 0</p></blockquote></li>
</ol>


<p>If you run <em>$ mysqladmin -uroot -p variables</em> you can see all global variables for your MySQL instance.</p>

<ol>
<li>Start MySQL

<blockquote><p>$ sudo mysqld -uroot</p></blockquote></li>
</ol>


<p>That should be it, don't need to do anything else except change the location to your Workspaces folder in your editor of choice.</p>
]]></content>
  </entry>
  
</feed>
