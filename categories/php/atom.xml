<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/php/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2015-05-08T08:54:30+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Careful using PHP array_merge]]></title>
    <link href="http://chapter31.com/2013/06/22/careful-using-php-array-merge/"/>
    <updated>2013-06-22T23:11:00+10:00</updated>
    <id>http://chapter31.com/2013/06/22/careful-using-php-array-merge</id>
    <content type="html"><![CDATA[<p>Using <code>array_merge</code> bit me today when I merged an array (which happened to be empty) with a numerically indexed array.</p>

<p>Because the array I was merging was empty, I expected my other (numerically indexed) array to remain untouched. However that wasn't the case, <a href="http://php.net/manual/en/function.array-merge.php">from the docs</a>:</p>

<pre><code>Values in the input array with numeric keys will be renumbered with incrementing
keys starting from zero in the result array.
</code></pre>

<p>This meant that the following array keys went from being their <em>constant</em> numeric values, to 0, 1, 2, 3:</p>

<p>```php
$pdoOptions = [</p>

<pre><code>PDO::ATTR_PERSISTENT         =&gt; false,
PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_WARNING,
PDO::MYSQL_ATTR_INIT_COMMAND =&gt; 'SET NAMES utf8',
PDO::ATTR_EMULATE_PREPARES   =&gt; false
</code></pre>

<p>];
```</p>

<p>I really dislike this behaviour, but it is what it is so be warned. Instead I just looped over my merging array and set the keys manually:</p>

<p>```php
if (count($myArr)) {</p>

<pre><code>foreach ($myArr as $key =&gt; $value) {
    $otherArr[$key] = $value;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP ['SCRIPT_NAME'] returning empty string]]></title>
    <link href="http://chapter31.com/2013/06/21/php-script-name-returning-empty-string/"/>
    <updated>2013-06-21T11:58:00+10:00</updated>
    <id>http://chapter31.com/2013/06/21/php-script-name-returning-empty-string</id>
    <content type="html"><![CDATA[<p>I was working with <a href="http://slimframework.com/">Slim</a> (v2.2.x) the other day and saw that a PHP warning was being thrown in one of the interal Slim files:</p>

<p><code>bash
Warning: strpos(): Empty needle in /vendor/slim/slim/Slim/Environment.php on line 143
</code></p>

<p>The code throwing the warning was the following <em>if</em> statement:</p>

<p><code>php
if (strpos($_SERVER['REQUEST_URI'], $_SERVER['SCRIPT_NAME']) === 0) {
</code></p>

<p>The actual issue was that <code>$_SERVER['SCRIPT_NAME']</code> was an empty string, so <em>strpos</em> was complaining as that is invalid syntax. Strangely, this was all working fine when we had the apache rewrite rules in an .htaccess file:</p>

<p><code>bash
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} !-f
RewriteRule ^(.*)$ /index.php/$1 [QSA,L]
</code></p>

<p>However once we moved the rules to the <em>VirtualHost</em> we got the warning. Some <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=40102">googling</a> <a href="https://bugs.php.net/bug.php?id=38141">told me</a> that this is a 6 year old problem with either apache, php, mod_php or the boogey man...depending on who you believe. It seems that various rewrite settings working differently if you have them in .htaccess vs the VirtualHost block.</p>

<p>I considered sending a pull request to Slim to handle the scenario where SCRIPT_NAME is empty:</p>

<p><code>php
if (strlen($_SERVER['SCRIPT_NAME']) &amp;&amp; strpos($_SERVER['REQUEST_URI'], $_SERVER['SCRIPT_NAME']) === 0) {
</code></p>

<p>But instead we added the PT (passthrough) rewrite flag. This works fine for what we're doing and <code>$_SERVER['SCRIPT_NAME']</code> now returns <em>/index.php</em> as it should.</p>

<p><code>bash
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} !-f
RewriteRule ^(.*)$ /index.php/$1 [QSA,PT,L]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Composer error - cannot redeclare class]]></title>
    <link href="http://chapter31.com/2013/06/03/php-composer-error-cannot-redeclare-class/"/>
    <updated>2013-06-03T09:16:00+10:00</updated>
    <id>http://chapter31.com/2013/06/03/php-composer-error-cannot-redeclare-class</id>
    <content type="html"><![CDATA[<p>I rebuilt PHP last night to include APC and all of a sudden composer stopped working in my project. Whenever I ran a simple update, install or dump-autoload I'd get:</p>

<p>```bash
$ composer update
PHP Fatal error:  include(): Cannot redeclare class symfony\component\process\process in phar:///usr/local/bin/composer/vendor/composer/ClassLoader.php on line 183</p>

<p>Fatal error: include(): Cannot redeclare class symfony\component\process\process in phar:///usr/local/bin/composer/vendor/composer/ClassLoader.php on line 183
```</p>

<p>A quick google told me <a href="https://github.com/composer/composer/issues/1432">others</a> also had the <a href="https://github.com/composer/composer/issues/264">same</a> issue.</p>

<p>It seems that there's a bug between composer.phar and APC. From one of the composer issues:</p>

<pre><code>Quite weird, but then again the php docs seem to acknowledge that APC should not really be
enabled on the CLI. It seems to be a phar+apc bug, see https://bugs.php.net/bug.php?id=59398
https://bugs.php.net/bug.php?id=59829 https://bugs.php.net/bug.php?id=59907 as well.
</code></pre>

<p>There are a couple of things you can do to fix this, but they all involve turning off APC for php-cli. First, run <em>composer diag</em> to see whether any more information can be gleaned:</p>

<p>```bash
$ composer diag
Checking platform settings: FAIL</p>

<p>The apc.enable_cli setting is incorrect.
Add the following to the end of your <code>php.ini</code>:</p>

<pre><code>apc.enable_cli = Off
</code></pre>

<p>The php.ini used by your command-line PHP is: /opt/php-5.4.15/lib/php.ini
If you can not modify the ini file, you can also run <code>php -d option=value</code> to modify ini values on the fly. You can use -d multiple times.
```</p>

<p>If you get that message, you know you have the same problem as I did :) You can also check the <a href="http://getcomposer.org/doc/articles/troubleshooting.md">troubleshooting</a> page on getcomposer.org</p>

<p>You can try running the <em>self-update</em> (for me I don't reference the .phar file because I use the unix install convention).</p>

<p><code>bash
php /usr/local/bin/composer self-update
</code></p>

<p>Those are really just everyday things to try if you have composer issues, to really fix this you need to disable APC for php-cli. You should set this option to <em>0</em> in your php.ini</p>

<p><code>bash
apc.enable_cli=0
</code></p>

<p>If you don't have access to php.ini, you can disable APC on the CLI per command:</p>

<p><code>bash
php -d apc.enable_cli=0 /usr/local/bin/composer install
</code></p>

<p>Note: if you have composer.phar in your project you could just do:</p>

<p><code>bash
php -d apc.enable_cli=0 composer.phar install
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing APC in PHP 5.4.x on Mac OSX]]></title>
    <link href="http://chapter31.com/2013/06/02/installing-apc-in-php-5-dot-4-x-on-mac-osx/"/>
    <updated>2013-06-02T16:33:00+10:00</updated>
    <id>http://chapter31.com/2013/06/02/installing-apc-in-php-5-dot-4-x-on-mac-osx</id>
    <content type="html"><![CDATA[<p>I recently <a href="/2013/05/06/installing-php-5-dot-4-plus-from-source-on-mac-mountain-lion/">installed PHP 5.4 from source</a> but needed to add <abbr title="Alternative PHP Cache">APC</abbr>.</p>

<p>Most people can install this using <abbr title="PHP Extension Community Library">PECL</abbr>, but I got an error doing this:</p>

<p>```bash
$ pecl install apc</p>

<p>Warning: lstat(): Lstat failed for /private/tmp/pear/cache/497e483d585c1e3f341260e73a8c6e85rest.cacheid in PEAR/REST.php on line 276</p>

<p>Warning: lstat(): Lstat failed for /private/tmp/pear/cache/497e483d585c1e3f341260e73a8c6e85rest.cacheid in /opt/php-5.4.15/lib/php/PEAR/REST.php on line 276
No releases available for package "pecl.php.net/apc"
install failed
```</p>

<p>So instead I downloaded the APC source <a href="http://pecl.php.net/package/APC">from the PECL website</a> and ran the following:</p>

<p><code>bash
cd APC-3.1.13/
phpize
./configure --with-php-config=/opt/php/bin/php-config --enable-apc
make
export TEST_PHP_ARGS='-n'
sudo make install
</code></p>

<p>Note that my <em>php-config</em> setting is a little different because I installed my PHP into <em>/opt</em> instead of the default <em>/usr/bin</em></p>

<p>The output of <em>make install</em> is:</p>

<p><code>bash
$ sudo make install
Installing shared extensions:     /opt/php-5.4.15/lib/php/extensions/no-debug-non-zts-20100525/
Installing header files:          /opt/php-5.4.15/include/php/
</code></p>

<p>Copy the <em>Installing shared extensions</em> path into your php.ini file.</p>

<p><code>bash
[apc]
extension=/opt/php-5.4.15/lib/php/extensions/no-debug-non-zts-20100525/apc.so
apc.enabled=1
apc.shm_size=128M
apc.ttl=7200
apc.user_ttl=7200
apc.enable_cli=1
</code></p>

<p>You can double check the installation process by either reviewing phpinfo(); in a browser or using CLI:</p>

<p><code>bash
php -i | grep apc
</code></p>

<p>If you see something like the following (from php -i)...all good:</p>

<p><code>bash
apc.cache_by_default =&gt; On =&gt; On
apc.canonicalize =&gt; On =&gt; On
apc.coredump_unmap =&gt; Off =&gt; Off
apc.enable_cli =&gt; On =&gt; On
apc.enabled =&gt; On =&gt; On
apc.file_md5 =&gt; Off =&gt; Off
apc.file_update_protection =&gt; 2 =&gt; 2
apc.filters =&gt; no value =&gt; no value
apc.gc_ttl =&gt; 3600 =&gt; 3600
apc.include_once_override =&gt; Off =&gt; Off
apc.lazy_classes =&gt; Off =&gt; Off
apc.lazy_functions =&gt; Off =&gt; Off
apc.max_file_size =&gt; 1M =&gt; 1M
apc.mmap_file_mask =&gt; no value =&gt; no value
apc.num_files_hint =&gt; 1000 =&gt; 1000
apc.preload_path =&gt; no value =&gt; no value
apc.report_autofilter =&gt; Off =&gt; Off
apc.rfc1867 =&gt; Off =&gt; Off
apc.rfc1867_freq =&gt; 0 =&gt; 0
apc.rfc1867_name =&gt; APC_UPLOAD_PROGRESS =&gt; APC_UPLOAD_PROGRESS
apc.rfc1867_prefix =&gt; upload_ =&gt; upload_
apc.rfc1867_ttl =&gt; 3600 =&gt; 3600
apc.serializer =&gt; default =&gt; default
apc.shm_segments =&gt; 1 =&gt; 1
apc.shm_size =&gt; 128M =&gt; 128M
apc.shm_strings_buffer =&gt; 4M =&gt; 4M
apc.slam_defense =&gt; On =&gt; On
apc.stat =&gt; On =&gt; On
apc.stat_ctime =&gt; Off =&gt; Off
apc.ttl =&gt; 7200 =&gt; 7200
apc.use_request_time =&gt; On =&gt; On
apc.user_entries_hint =&gt; 4096 =&gt; 4096
apc.user_ttl =&gt; 7200 =&gt; 7200
apc.write_lock =&gt; On =&gt; On
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Xdebug on Mac Mountain Lion (10.8.3)]]></title>
    <link href="http://chapter31.com/2013/05/29/installing-xdebug-on-mac-mountain-lion-10-dot-8-3/"/>
    <updated>2013-05-29T06:31:00+10:00</updated>
    <id>http://chapter31.com/2013/05/29/installing-xdebug-on-mac-mountain-lion-10-dot-8-3</id>
    <content type="html"><![CDATA[<p>Even though I'm running Mountain Lion (10.8.3) which comes with Xdebug I couldn't get the PHP (5.4.14) local web server to register that Xdebug was actually installed and enabled.</p>

<p>My php.ini had the already installed Xdebug extension enabled:</p>

<p><code>bash
zend_extension="/usr/lib/php/extensions/no-debug-non-zts-20090626/xdebug.so"
</code></p>

<p>But whenever I inspected <code>phpinfo()</code> there wasn't any mention of Xdebug.</p>

<p>Luckily the <a href="http://xdebug.org/wizard.php">website has a wizard</a> where you can paste the output of phpinfo(). From there you get detailed instructions on how to download, configure and make the latest version of Xdebug. It's pretty simple.</p>

<p>Essentially the steps are as follows:</p>

<ol>
<li>Download <a href="http://xdebug.org/files/xdebug-2.2.3.tgz">xdebug-2.2.3.tgz</a></li>
<li>Unpack the downloaded file with <code>tar -xvzf xdebug-2.2.3.tgz</code></li>
<li>Run: <code>cd xdebug-2.2.3</code></li>
<li>Run: <code>phpize</code> (Any problems…<a href="http://xdebug.org/docs/faq#phpize">see the FAQ</a>)</li>
<li>Run: <code>./configure</code></li>
<li>Run: <code>make</code></li>
<li>Run: <code>sudo mkdir -p /usr/lib/php/extensions/no-debug-non-zts-20100525</code></li>
<li>Run: <code>sudo cp modules/xdebug.so /usr/lib/php/extensions/no-debug-non-zts-20100525</code></li>
<li>Update your /etc/php.ini and uncomment/add the line
<code>zend_extension = /usr/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so</code></li>
<li>Restart the webserver</li>
</ol>


<p>Now if you check the output of phpinfo() you should see Xdebug.</p>

<p>To make sure your debug output is being styled properly, make sure you have <code>html_errors = On</code> in php.ini (it defaults to <em>Off</em>).</p>
]]></content>
  </entry>
  
</feed>
