<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SVN | chapter31 &raquo;]]></title>
  <link href="http://chapter31.com/categories/svn/atom.xml" rel="self"/>
  <link href="http://chapter31.com/"/>
  <updated>2013-05-02T23:40:20+10:00</updated>
  <id>http://chapter31.com/</id>
  <author>
    <name><![CDATA[Michael Sharman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Editing svn:ignore on the terminal]]></title>
    <link href="http://chapter31.com/2012/07/10/editing-svnignore-on-the-terminal/"/>
    <updated>2012-07-10T22:49:19+10:00</updated>
    <id>http://chapter31.com/2012/07/10/editing-svnignore-on-the-terminal</id>
    <content type="html"><![CDATA[<p><em>svn:ignore</em> is a great way to exclude certain files or folders from being added to your subversion repository. Typically I'll manage this via an IDE plugin like subclipse (in Eclipse), but if you want to do it via the terminal instead (bash)...here's how.</p>

<h2>Crappy way</h2>

<p>You can add single values to your svn:ignore by running this command either at the root of your project or wherever directory you want the ignore to take effect:</p>

<pre><code>svn propset svn:ignore "*.project" .
</code></pre>

<p>However that command seems not only to add an ignore rule, but also it clears any rules you may have had on that directory and only inserts the single rule you just specified. No good.</p>

<h2>Better way</h2>

<p>There are a couple of ways to enter multiple ignore values into your ignore file, I like simply opening up the ignore editor. Try this command:</p>

<pre><code>svn propedit svn:ignore .
</code></pre>

<p>If you get the following error it means you haven't associated an editor with svn:ignore</p>

<blockquote><p>svn: None of the environment variables SVN_EDITOR, VISUAL or EDITOR are set, and no 'editor-cmd' run-time configuration option was found</p></blockquote>

<p>You can quickly associate the editor with nano (or another editor of your choice) by running:</p>

<pre><code>export SVN_EDITOR=nano
</code></pre>

<p>That's not ideal as it'll only work in the current bash session, when you close your terminal window that export will be lost. The best bet is to add it to your ~/.bash_profile (or ~/.bash_login).</p>

<p><code>
cd ~
nano .bash_profile
export SVN_EDITOR=nano
</code></p>

<p>Now you'll always be able to edit your svn:ignore file. So let's try again:</p>

<pre><code>svn propedit svn:ignore .
</code></pre>

<p>Nano (or whatever editor you specified) should open allowing you to enter whatever you want :)</p>

<p>Here's a simple list of mine:</p>

<pre><code>*.DS_Store  
*.project  
*.sublime-project  
*.sublime-workspace  
htdocs/WEB-INF
</code></pre>

<p>If you actually want to see all your files (including those that you've ignored) via the terminal, run:</p>

<pre><code>svn status --no-ignore
</code></pre>

<h2>Externals</h2>

<p>Note that you can also edit any svn:externals using the same technique.</p>

<pre><code>svn propedit svn:externals .
</code></pre>

<p>Remember that you need to be in the location of the directory that contains any externals for this to work properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development configuration tips for Ubuntu]]></title>
    <link href="http://chapter31.com/2008/12/13/development-configuration-tips-for-ubuntu/"/>
    <updated>2008-12-13T13:28:20+11:00</updated>
    <id>http://chapter31.com/2008/12/13/development-configuration-tips-for-ubuntu</id>
    <content type="html"><![CDATA[<p>I just setup my machine at home with Ubuntu 8.10 (desktop) which was so easy think I saved hours off the time it would normally take with Windows. So much is already installed and ready to go and with apt (or the Synaptic package manager) it's super quick to download and install extra things things like MySQL, PHP, Apache, Java etc</p>

<p>Here are some notes which helped me out when configuring some of these development tools.</p>

<p>This assumes you've already installed Apache and MySQL, for notes on installing these I <a href="http://ubuntuexperiment.wordpress.com/2008/11/10/installing-apache-php-mysql/">found this article</a> to be a great resource.</p>

<p>If you get this message when you restart Apache, "<em>Could not reliably determine the serverâ€™s fully qualified domain name, using 127.0.1.1 for ServerName</em>", edit /etc/apache2/conf.d/fqdn and add "ServerName localhost":</p>

<p><code>
sudo nano /etc/apache2/conf.d/fqdn
</code></p>

<p><strong>Load the mod_rewrite module for Apache</strong></p>

<p><code>
sudo a2enmod rewrite
</code></p>

<p><strong>Enable your Apache vhosts</strong></p>

<p>I already had all my vhosts defined in separate <em>.conf</em> files on my windows box, so I copied them all into /etc/apache2/sites-available and setup symbolic links from my /etc/apache2/sites-enabled:</p>

<p><code>
sudo ln -s /etc/apache2/sites-available/mysite.conf /etc/apache2/sites-enabled/mysite.conf
</code></p>

<p><strong>Download and install PHP</strong></p>

<p><code>
sudo apt-get install php5 libapache2-mod-php5
</code></p>

<p><strong>PHP connector to MySQL</strong></p>

<p><code>
sudo apt-get install libapache2-mod-auth-mysql php5-mysql
</code></p>

<p><strong>Install MySQL Administrator</strong></p>

<p><code>
sudo apt-get install mysql-admin
</code></p>

<p><strong>Install subversion</strong></p>

<p><code>
sudo apt-get install subversion
</code></p>

<p>I am also using <a href="http://www.poweredbypulse.com/">Pulse</a> to manage my <a href="http://www.eclipse.org/">eclipse</a> development environment so I needed Java which I got from the Synaptic Package Manager (<em>sun-java6-bin</em>). Pulse is super cool, I used the standard cfeclipse profile with the addition of the PHP PDT (for developing in PHP).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up svn:externals with subclipse]]></title>
    <link href="http://chapter31.com/2008/05/22/setting-up-svnexternals-with-subclipse/"/>
    <updated>2008-05-22T17:30:43+10:00</updated>
    <id>http://chapter31.com/2008/05/22/setting-up-svnexternals-with-subclipse</id>
    <content type="html"><![CDATA[<p>Setting up "externals" with subversion can assist you when you want to load external libraries into an existing project.</p>

<p>You may have a JavaScript validation framework which you re-use amongst many projects. Of course you don't want to copy and paste the code into every project, what would happen then if you wanted to upgrade the codebase?</p>

<p>Using subclipse (in the Eclipse IDE) you can link a separate svn repository in the middle of your project by adding an <em>svn:externals</em> property. Right click the parent directory you want to import the external repository into and choose "Team -> Set Property"</p>

<p><a href="/images/uploads/2008/05/cfeclipse-svnproperties.png"><img src="/images/uploads/2008/05/cfeclipse-svnproperties-281x300.png" alt="" /></a></p>

<p>Once you load the properties dialog window you need to add the following into the property field:</p>

<p>svn:externals</p>

<p>Then in the property content box add the following:</p>

<p>[yourLibraryName] -r98 [url to repo]</p>

<p><code>javascript
e.g. jquery-validation -r98 https://myhome.com/svn/repos/jquery-validation/trunk
</code></p>

<p><a href="/images/uploads/2008/05/screenshot-set-a-svn-property.png"><img src="/images/uploads/2008/05/screenshot-set-a-svn-property-300x233.png" alt="" /></a></p>

<p>In the above example a directory called "jquery-validation" will be created with the contents of the repository located at "https://myhome.com/svn/repos/jquery-validation/trunk".</p>

<p>The "-r98" is the revision number of the external library you want to add. This is important because it means you can link to a snapshot of the library and not simply the trunk (which would mean you couldn't control the updates to the library).</p>

<p>Once that is done simply update your project and it will import your external codebase into your project.</p>

<p>Thanks to <a href="http://www.lynchconsulting.com.au/">Mark</a> for showing me syntax for this one :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storing Flash, ColdFusion and SQL in subversion]]></title>
    <link href="http://chapter31.com/2007/08/14/storing-flash-coldfusion-and-sql-in-subversion/"/>
    <updated>2007-08-14T09:28:38+10:00</updated>
    <id>http://chapter31.com/2007/08/14/storing-flash-coldfusion-and-sql-in-subversion</id>
    <content type="html"><![CDATA[<p>Most developers who use Source Code Management are familiar with the fact that while you can have any directory you want in your 'repositories', it is recommended that you use the following directories as a base layout:</p>

<ul>
<li><p>branches</p></li>
<li><p>tags</p></li>
<li><p>trunk</p></li>
</ul>


<p>The trunk directory will hold the "main line" of development, a branches directory will have "branch-ing" development (perhaps a maintenance release?), and a tags directory holds a "snapshot" in time (essentially a read-only area) often used when deploying to a production server.</p>

<p>For example:</p>

<p>``` javascript
/myrepository/myproject</p>

<pre><code>/branches
/tags
/trunk
</code></pre>

<p>```</p>

<p>In the past when working in pure ColdFusion/HTML applications I've had my entire project sitting in the root of the "trunk" folder which makes it nice and easy as I can point my repository to "trunk" when updating or commiting.</p>

<p>But how does this work when you have Flash in your project? Essentially as a ColdFusion (or front end) developer I'm not interested in having ActionScript files or any .fla's/Flash assets in my project directory let alone on a production or staging server!</p>

<p>Some people like to have totally separate project repositories to hold all Flash elements, but I like to keep everything located in the same svn location. This seems more logical to me.</p>

<p>To this end I've included 3 sub-directories into my "trunk" directory:</p>

<ul>
<li><p>flash</p></li>
<li><p>sql</p></li>
<li><p>www</p></li>
</ul>


<p>Which gives me:</p>

<p>``` javascript
/myrepository/myproject</p>

<pre><code>/branches
/tags
/trunk
    /flash
    /sql
    /www
</code></pre>

<p>```</p>

<p>That way any Flash developers working on the project can commit their Flash assets to the "flash" directory, any database scripts can be stored in the "sql" directory and the entire <em>deployable</em> project (including the exported .swf's) needed by the web server can live in the "www" directory.</p>

<p>With this setup each developer only has the files which they directly need on their workstation/development environment. It's also just as easy to "tag" the "www" directory for production deployments.</p>
]]></content>
  </entry>
  
</feed>
